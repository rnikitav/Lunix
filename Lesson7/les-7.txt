        ЗАДАНИЕ 1
    
    1. Найдите информацию о том, как в Ubuntu открыть порт 80,443. 
       Укажите как.


       а) sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT       Открываем 80 порт и добавляем его в конец -А 
       б) sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT      Открываем 443


       Если порты блокируются раньше(Если кто-то это настроил то вместо флага
       -А, который добавляет в конец и если отбрасывает раньше, то до него дело уже
       не дойдет, поэтому используем флаг -I(insert), который добавит правило вначале цепочки)


       в) sudo iptables -I INPUT -p tcp --dport 1924 -j ACCEPT (если раьше был запрещен)
       г) sudo iptables -nvL INPUT              Проверяем и видим:

        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0       0.0.0.0/0            tcp dpt:80
        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0       0.0.0.0/0            tcp dpt:443

    2. Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
       на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом 
       "Hi $user!", где $user - это значение хидера 'User'.
       иначе отправлять код 404 с текстом "Page not found".


       а) sudo apt-get install nginx                    Устанавливаем nginx
       б) systemctl status nginx                        Проверяем что активен
       в) sudo vim /etc/nginx/conf.d/mysite.conf        Создаем файл с содержимым:

        server{
            listen 80;
            server_name razlivanov-VirtualBox;

            location / {
                if ($http_user != ''){
                    return 200 "Hello $http_user";
                }
                    return 404 "Page not found";
            }

            location /admin {
                return 200 "HTTP admin page";
            }
        }


       г) sudo nginx -t                                 Ok
       д) systemctl restart nginx
       е) curl -L http://razlivanov-VirtualBox -D - -H "user: Nikita_"
            HTTP/1.1 200 OK
            Connection: keep-alive

            Hello Nikitara_zlivanov@razlivanov-VirtualBox:~ $


            Без хедера
       ё) curl -L razlivanov-VirtualBox -D -
            HTTP/1.1 404 Not Found
            Connection: keep-alive

            Page not foundrazlivanov@razlivanov-VirtualBox:~ $





Задание 2
1. найти информацию о том, что такое самоподписанные сертификаты и сгенерировать такой для 
   своего вэб сервера. Написать своими словами, что это такое и как сгенерить.
2. добавить SSL соединение для дифолтного виртуального хоста nginx, используя порт 443. 
   Прикрепить конфиги nginx.
3. откройте в браузере страницу хоста и посмотрите, как браузер реагирует на самоподписанные 
   сертификаты. Напишите, что видите.
4. мы говорили о необходимости шифровать симметрично. При этом проблем с получением 
   ассиметричных сертификатов нет. Зачем такая сложная схема для установления SSL соединения? 
   Почему бы не шифровать ассиметрично? Своими словами.






В криптографии под самоподписанным SSL сертификатом понимают сертификат открытого ключа, 
изданный и подписанный тем же лицом, которое он идентифицирует. Проще говоря, если 
Вы сами для своего домена или IP-адреса создали SSL сертификат он будет называться 
самоподписанным. Самоподписанные SSL сертификаты лучше всего подходят для внутреннего 
пользования в силу некоторых неудобств, которые мы опишем ниже, и зачастую применяются 
частными лицами или же в малых фирмах, сотрудники которых осведомлены о его наличии и 
необходимости добавлять его в списки браузера.





а) sudo vim localhost.conf
   вставляем туда:

    [req]
    default_bits       = 2048
    default_keyfile    = localhost.key
    distinguished_name = req_distinguished_name
    req_extensions     = req_ext
    x509_extensions    = v3_ca

    [req_distinguished_name]
    countryName                 = Country Name (2 letter code)
    countryName_default         = US
    stateOrProvinceName         = State or Province Name (full name)
    stateOrProvinceName_default = New York
    localityName                = Locality Name (eg, city)
    localityName_default        = Rochester
    organizationName            = Organization Name (eg, company)
    organizationName_default    = localhost
    organizationalUnitName      = organizationalunit
    organizationalUnitName_default = Development
    commonName                  = Common Name (e.g. server FQDN or YOUR name)
    commonName_default          = localhost
    commonName_max              = 64

    [req_ext]
    subjectAltName = @alt_names

    [v3_ca]
    subjectAltName = @alt_names

    [alt_names]
    DNS.1   = localhost
    DNS.2   = 127.0.0.1






б)sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt -config localhost.conf

в) mkdir /etc/nginx/ssl/

г) cp localhost.crt /etc/nginx/ssl/localhost.crt
д) cp localhost.key /etc/nginx/ssl/localhost.key

е) vim /etc/nginx/conf.d/site.conf
   Содержимое:

   server{
    listen 443 ssl;
    server_name razlivanov-VirtualBox;
    ssl_certificate /etc/nginx/ssl/localhost.crt;
    ssl_certificate_key /etc/nginx/ssl/localhost.key;

    location / {
        return 200 "HTTP SSL";
    }

    location /admin {
        return 200 "HTTP this is admin page";
    }
  }
   



ё) nginx -t
ж) systemctl restart nginx

   без флага -к curl не даст зайти на потенциально опасный сайт из-за самоподписанного сертификата

з) curl -Lk https://localhost
и) curl -Lk https://localhost/admin



В браузере ругается: 


Warning: Potential Security Risk Ahead

    Firefox detected a potential security threat and did not continue to localhost. 
    If you visit this site, attackers could try to steal information like your passwords, 
    emails, or credit card details.




Первый недостаток ассиметричного шифрования заключается в низкой скорости выполнения операций зашифровки и 
расшифровки, что обусловлено необходимостью обработки ресурсоемких операций. Как следствие, требования к 
аппаратной составляющей такой системы часто бывают неприемлемы.

Другой недостаток – уже чисто теоретический, и заключается он в том, что математически криптостойкость 
алгоритмов асимметричного шифрования пока еще не доказана.

Дополнительные проблемы возникают и при защите открытых ключей от подмены, ведь достаточно просто 
подменить открытый ключ легального пользователя, чтобы впоследствии легко расшифровать его своим 
секретным ключом.